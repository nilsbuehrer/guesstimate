{"version":3,"sources":["Question.js","QuestionForm.js","App.js","serviceWorker.js","index.js"],"names":["Question","questions","useState","setQuestions","useEffect","unsubscribe","firebase","firestore","collection","onSnapshot","snapshot","newQuestions","docs","map","doc","id","data","useQuestions","question","key","answer","QuestionForm","setQuestion","setAnswer","className","onSubmit","e","preventDefault","add","parseInt","then","name","type","value","onChange","currentTarget","App","packageJson","version","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qkCAyCeA,MAff,WACE,IAAMC,EAvBR,WAAyB,IAAD,EACYC,mBAAS,IADrB,mBACfD,EADe,KACJE,EADI,KAmBtB,OAhBAC,qBAAU,WACR,IAAMC,EAAcC,IACjBC,YACAC,WAAW,aACXC,YAAW,SAAAC,GACV,IAAMC,EAAeD,EAASE,KAAKC,KAAI,SAAAC,GAAG,oBACxCC,GAAID,EAAIC,IACLD,EAAIE,WAGTb,EAAaQ,MAGf,OAAO,kBAAMN,KACd,IAEIJ,EAIWgB,GAElB,OACE,4BACGhB,EAAUY,KAAI,SAAAK,GAAQ,OACrB,wBAAIC,IAAKD,EAASH,IAChB,6BAAMG,EAASA,UACf,6BAAMA,EAASE,c,MCiBVC,MA/Cf,WAAyB,IAAD,EACUnB,mBAAS,IADnB,mBACfgB,EADe,KACLI,EADK,OAEMpB,mBAAS,GAFf,mBAEfkB,EAFe,KAEPG,EAFO,KAoBtB,OACE,0BAAMC,UAAU,iBAAiBC,SAjBnC,SAAkBC,GAChBA,EAAEC,iBAEFrB,IACGC,YACAC,WAAW,aACXoB,IAAI,CACHV,WACAE,OAAQS,SAAST,KAElBU,MAAK,WACJR,EAAY,IACZC,EAAU,SAMZ,2BAAOC,UAAU,OACf,2CACA,2BACEO,KAAK,WACLC,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAAAR,GAAC,OAAIJ,EAAYI,EAAES,cAAcF,WAG/C,2BAAOT,UAAU,OACf,yCACA,2BACEO,KAAK,SACLC,KAAK,SACLC,MAAOb,EACPc,SAAU,SAAAR,GAAC,OAAIH,EAAUG,EAAES,cAAcF,WAG7C,4BAAQT,UAAU,SAASQ,KAAK,UAC9B,2C,QC1BOI,MAbf,WACE,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,aAAd,eACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,0BAAMA,UAAU,WAAhB,KAA6Ba,EAAYC,WCF3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCENrC,gBAXuB,CACnBsC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAInB7C,cAEeA,YAEf8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.8ae8cf88.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Question.css\";\nimport firebase from \"firebase\";\n\nfunction useQuestions() {\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = firebase\n      .firestore()\n      .collection(\"questions\")\n      .onSnapshot(snapshot => {\n        const newQuestions = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        setQuestions(newQuestions);\n      });\n\n      return () => unsubscribe;\n  }, []);\n\n  return questions;\n}\n\nfunction Question() {\n  const questions = useQuestions();\n\n  return (\n    <ol>\n      {questions.map(question => (\n        <li key={question.id}>\n          <div>{question.question}</div>\n          <div>{question.answer}</div>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nexport default Question;\n","import React, { useState } from \"react\";\nimport \"./QuestionForm.css\";\nimport firebase from \"firebase\";\n\nfunction QuestionForm() {\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(0);\n\n  function onSubmit(e) {\n    e.preventDefault();\n\n    firebase\n      .firestore()\n      .collection(\"questions\")\n      .add({\n        question,\n        answer: parseInt(answer)\n      })\n      .then(() => {\n        setQuestion('');\n        setAnswer('');\n      })\n  }\n\n  return (\n    <form className=\"form-container\" onSubmit={onSubmit}>\n      <label className=\"row\">\n        <span>Question:</span>\n        <input\n          name=\"question\"\n          type=\"text\"\n          value={question}\n          onChange={e => setQuestion(e.currentTarget.value)}\n        />\n      </label>\n      <label className=\"row\">\n        <span>Answer:</span>\n        <input\n          name=\"answer\"\n          type=\"number\"\n          value={answer}\n          onChange={e => setAnswer(e.currentTarget.value)}\n        />\n      </label>\n      <button className=\"submit\" type=\"submit\">\n        <span>Submit</span>\n      </button>\n    </form>\n  );\n}\n\nexport default QuestionForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport Question from './Question';\nimport QuestionForm from \"./QuestionForm\";\nimport packageJson from '../package.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <h1 className=\"App-title\">Guesstimate</h1>\n        <QuestionForm />\n        <Question />\n      </div>\n      <span className=\"version\">v.{packageJson.version}</span>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDz3g0Nm9XMlfn2T9l549EuHCQpZwqIGoQ\",\n    authDomain: \"guesstimate-44045.firebaseapp.com\",\n    databaseURL: \"https://guesstimate-44045.firebaseio.com\",\n    projectId: \"guesstimate-44045\",\n    storageBucket: \"guesstimate-44045.appspot.com\",\n    messagingSenderId: \"887072051297\",\n    appId: \"1:887072051297:web:48a212739a779d7b061a20\",\n    measurementId: \"G-7S61FY8F00\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}